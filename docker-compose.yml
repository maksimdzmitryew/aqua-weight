
services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: aw-backend
    restart: unless-stopped
    networks:
      - aw-net
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend/app:/app/app
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--reload-dir", "/app/app"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 5

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: aw-frontend
    restart: unless-stopped
    networks:
      - aw-net
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules

  db:
    image: mariadb:10.11
    container_name: aw-mariadb
    restart: unless-stopped
    environment:
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD:-rootpass}
      MARIADB_DATABASE: ${MARIADB_DATABASE:-appdb}
      MARIADB_USER: ${MARIADB_USER:-appuser}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD:-apppass}
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./db/init:/docker-entrypoint-initdb.d:ro
    networks:
      - aw-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: aw-nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/ssl/aw.max:ro
    healthcheck:
      test: ["CMD-SHELL", "nginx -t && test -f /etc/ssl/aw.max/fullchain.pem && test -f /etc/ssl/aw.max/privkey.pem"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - aw-net

volumes:
  mariadb_data:
  frontend_node_modules:

networks:
  aw-net:
    driver: bridge
